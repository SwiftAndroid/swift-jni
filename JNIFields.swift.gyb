// Hash maps and fields

import CJNI

%{
  jTypes = [
    ('Object', 'jobject'),
    ('Boolean', 'jboolean'),
    ('Byte', 'jbyte'),
    ('Char', 'jchar'),
    ('Short', 'jshort'),
    ('Int', 'jint'),
    ('Long', 'jlong'),
    ('Float', 'jfloat'),
    ('Double', 'jdouble')
  ]
}%

public extension JNI {

    public func GetFieldID(targetClass: jclass, _ name: String, _ sig: String) -> jfieldID {
        let env = self._env
        return env.memory.memory.GetFieldID(env, targetClass, name, sig)
    }

    public func GetStaticFieldID(targetClass: jclass, _ name: String, _ sig: String) -> jfieldID {
        let env = self._env
        return env.memory.memory.GetStaticFieldID(env, targetClass, name, sig)
    }

% for (TypeName, Type) in jTypes:
    public func Get${TypeName}Field(obj: jobject, _ fieldID: jfieldID) -> ${Type} {
        let env = self._env
        return env.memory.memory.Get${TypeName}Field(env, obj, fieldID)
    }

    public func Set${TypeName}Field(obj: jobject, _ fieldID: jfieldID, _ value: ${Type}) {
        let env = self._env
        env.memory.memory.Set${TypeName}Field(env, obj, fieldID, value)
    }

    public func GetStatic${TypeName}Field(targetClass: jclass, _ fieldID: jfieldID) -> ${Type} {
        let env = self._env
        return env.memory.memory.GetStatic${TypeName}Field(env, targetClass, fieldID)
    }

    public func SetStatic${TypeName}Field(targetClass: jclass, _ fieldID: jfieldID, _ value: ${Type}) {
        let env = self._env
        env.memory.memory.SetStatic${TypeName}Field(env, targetClass, fieldID, value)
    }
% end
}

// ${'Local Variables'}:
// eval: (read-only-mode 1)
// End:
